package com.example.demo.controller;

import com.example.demo.model.*;
import com.example.demo.service.I{{model.name}}Service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@CrossOrigin("http://localhost:4200")
@RestController
@RequestMapping(value = "/{{model.name.lower()}}")
public class {{model.name}}Controller {

    @Autowired
    private I{{model.name}}Service {{model.name.lower()}}Service;
        
    {% if model.controller.value.value[0] != "CRUD" %}
        {%for n in range(model.controller.value.value | length)%}
        @RequestMapping(method = RequestMethod.{%if 'get' in model.controller.value.value[n].split('()')[0] %}GET{%endif%}{%if 'post' in model.controller.value.value[n].split('()')[0] %}POST{%endif%}{%if 'put' in model.controller.value.value[n].split('()')[0] %}PUT{%endif%}{%if 'delete' in model.controller.value.value[n].split('()')[0] %}DELETE{%endif%}, value = "/{{model.controller.value.value[n].split('()')[0]}}")
        public ResponseEntity<?> {{model.controller.value.value[n]}} {
            return new ResponseEntity<>(HttpStatus.OK);
        }
        {%endfor%}

        @RequestMapping(method = RequestMethod.POST)
        public ResponseEntity<{{model.name}}> add(@RequestBody {{model.name}} {{model.name.lower()}}) {
            {{model.name.lower()}}Service.save({{model.name.lower()}});
            return new ResponseEntity<>(HttpStatus.OK);
        }

        @RequestMapping(method = RequestMethod.GET)
        public ResponseEntity<List<{{model.name}}>> getAll() {
            return new ResponseEntity<>({{model.name.lower()}}Service.findAll(), HttpStatus.OK);
        }

        @RequestMapping(method = RequestMethod.GET, value = "{id}")
        public ResponseEntity<{{model.name}}> getAll(@PathVariable Long id) {
            return new ResponseEntity({{model.name.lower()}}Service.findById(id), HttpStatus.OK);
        }

        @RequestMapping(method = RequestMethod.DELETE, value = "{id}")
        public ResponseEntity<Void> delete{{model.name}}(@PathVariable Long id) {
            {{model.name.lower()}}Service.remove(id); 
            return new ResponseEntity<>(HttpStatus.OK);
        }

        @RequestMapping(method = RequestMethod.PUT, value = "{id}")
        public ResponseEntity<{{model.name}}> update{{model.name}}(@PathVariable Long id, @RequestBody {{model.name}} {{model.name.lower()}}) {
            {{model.name.lower()}}Service.update({{model.name.lower()}});
            return new ResponseEntity<>({{model.name.lower()}}, HttpStatus.CREATED);
        }
    {% endif %}
    
    {% if model.controller.value.value[0] == "CRUD" %}
        @RequestMapping(method = RequestMethod.POST)
        public ResponseEntity<{{model.name}}> add(@RequestBody {{model.name}} {{model.name.lower()}}) {
            {{model.name.lower()}}Service.save({{model.name.lower()}});
            return {{model.name.lower()}}Service.save({{model.name.lower()}}) ? new ResponseEntity<>({{model.name.lower()}}, HttpStatus.CREATED) : new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

        @RequestMapping(method = RequestMethod.GET)
        public ResponseEntity<List<{{model.name}}>> getAll() {
            return new ResponseEntity<>({{model.name.lower()}}Service.findAll(), HttpStatus.OK);
        }

        @RequestMapping(method = RequestMethod.GET, value = "{id}")
        public ResponseEntity<{{model.name}}> getAll(@PathVariable Long id) {
            return new ResponseEntity({{model.name.lower()}}Service.findById(id), HttpStatus.OK);
        }

        @RequestMapping(method = RequestMethod.DELETE, value = "{id}")
        public ResponseEntity<Void> delete{{model.name}}(@PathVariable Long id) {
            {{model.name.lower()}}Service.remove(id); 
            return new ResponseEntity<>(HttpStatus.OK);        
        }

        @RequestMapping(method = RequestMethod.PUT, value = "{id}")
        public ResponseEntity<{{model.name}}> update{{model.name}}(@PathVariable Long id, @RequestBody {{model.name}} {{model.name.lower()}}) {
            {{model.name.lower()}}Service.update({{model.name.lower()}});
            return new ResponseEntity<>({{model.name.lower()}}, HttpStatus.CREATED);        
        }
    {% endif %}
    

}